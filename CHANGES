
Following the 1.15 release, C++ toolbox has moved to C++-11. This brings many template exploitations, plus move constructors. 
In contrast, moving to C++-14 or C++-17 will not give a major jump (as far as I can presently see).

/***** changes after the last release ******/

- moved to C++-11:
  - made some template specializations obsolete by using constexpr
  - included move constructors and operator=
- some more SIMD routines, including contains, equals and reverse for bytes
- matrix determinant
- made prime test etc. a template, added getting the prime divisors of an unsigned integer
- extended and improved the various sets
- corrected and improved sorting
- added maps: with plain keys and with hashing

/***** changes for version 1.15 (February 17 2020) ******/

- TreeSet: efficient search trees based on arrays. Functionality can be extended. No plans for a TreeMap so far.
- SortedSet: must faster than TreeSet in practice, and simpler. 
- UnsortedSet: roughly as efficient as SortedSet, even simpler. 
- UnsortedSetExploitSort
- many new basic routines (routines.hh, some moved from macros.hh), most of them with SIMD implementation. Includes reverse and find.
- corrected and extended rational numbers, plus improved efficiency and cases that can be handled inside precision.
- released sorting, with many bubble sort variants
- augmented binary search (routines.hh)
- fixes and extensions for rational numbers
- added test for prime numbers

/***** changes for version 1.1 (December 20 2019) ****/

- added symmetric 2D storage
- introduced StorageBase
- assignment based on unified_assign
- templates for abs, log, exp, pow
- now outputting trace information when errors occur
- a couple of additional member functions
- fixed a few lines where the template parameter ST was missing
- added a member add_constant() for vectors, matrices and tensors
- slightly improved speed of a few routines where the size of the data_-array remains constant
- in vector arithmetic, the dimension check is now skipped if a certain preprocessor definition is set
- adapted indentation

/***** changes for version 1.03 *****/

- added operators in debug mode to check if a Storage1/2/3D is assigned a scalar
- added storage_stl_interface for interchange between Storage1/2/3Ds of
  different base types and between a Storage1D and an std::vector
- added storage_util and stl_util to ease sorting vectors and provide some
  find functionality

/****** changes for version 1.02 *****/

- new system for output of typenames
- made access to containers more rigorously restricted (regarding const-ness)
- added stl_util.hh

/****** changes for version 1.01 *****/

- updated Makefile
- amendmend to README
- bugfix for tokenization with string separator
- improved handling of outputting typenames, including in convert<>
- moved comparison operators from vector to storage1D

/************** changes for version 1.0 *****/

- added FlexibleStorage1D, meant to replace std::vector with its push_back() functionality
- can now output the type of a container (makes debugging much easier)
- added operators for Storage1D
- improved Windows-compatibility when writing PGMs and PPMs (many thanks to Petter Strandmark)
- added a variable-dimension storage class
- introduced NamedStorage3D
- some smallish extensions
- added routines for the greatest common divisor
- extended stringprocessing, including handling of special characters when downcasing
- optimizations when resizing a storage1D
- added class Rational64
- size_t was replaced by a template parameter in 1/2/3-dimensional containers

/************** changes for version 0.925 **********/

- moved method set_constant() from Vector to Storage1D
- added template for outputting std::pair<t1,t2>

/************** changes for version 0.921 *********/
- included some files that were accidentally forgotten in 0.92

*************** changes for version 0.92 *********/
- Introduced an operator-=() for the tensor classes
- Introduced a class NamedStorage2D
- The tensor class has now a sum(x,y) and a min(x,y) method
- Improved Windows compatibility

*************** changes for version 0.91 *********/
- PGMs and PPMs are now written in binary mode as otherwise problems under Windows can occur.
  Many thanks to Petter Strandmark for pointing this out.
- The vector class has now template specializations of the copy constructor, based on memcpy
- The matrix and tensor classes have now template specializations of the operator=(), based on memcpy
- Introduced an operator-=() for the vector and matrix classes

*************** version 0.9 *********/
first released version
